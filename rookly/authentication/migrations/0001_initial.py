# Generated by Django 2.2.17 on 2021-01-29 15:51

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0011_update_proxy_permissions"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=30, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="User's email.",
                        max_length=254,
                        unique=True,
                        verbose_name="email",
                    ),
                ),
                (
                    "cpf",
                    models.CharField(
                        help_text="User's cpf.",
                        max_length=11,
                        unique=True,
                        verbose_name="cpf",
                    ),
                ),
                (
                    "telephone",
                    models.CharField(
                        help_text="User's Telephone.",
                        max_length=16,
                        null=True,
                        verbose_name="telephone",
                    ),
                ),
                (
                    "address_cep",
                    models.IntegerField(help_text="User's Cep.", verbose_name="cep"),
                ),
                (
                    "address_number",
                    models.IntegerField(
                        help_text="User's Address Number.",
                        verbose_name="address number",
                    ),
                ),
                (
                    "address_complement",
                    models.TextField(
                        blank=True,
                        help_text="User's Address Complement.",
                        verbose_name="address complement",
                    ),
                ),
                ("birth_date", models.DateField(verbose_name="birth date")),
                (
                    "is_staff",
                    models.BooleanField(default=False, verbose_name="staff status"),
                ),
                ("is_active", models.BooleanField(default=True, verbose_name="active")),
                (
                    "joined_at",
                    models.DateField(auto_now_add=True, verbose_name="joined at"),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.Permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
            },
        ),
    ]
